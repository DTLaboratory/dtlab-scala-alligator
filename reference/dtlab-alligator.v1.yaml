openapi: 3.0.0
info:
  title: dtlab alligator
  version: '1.0'
  contact:
    name: navicore
    email: ed@onextent.com
  license:
    name: MIT
    url: 'https://github.com/SoMind/dtlab-scala-alligator/blob/master/LICENSE'
  description: "Manage DtLab actor runtime cloud.\n\nThe DtLab is a distributed programmable actor runtime environment.\n\n  * optimized to enable graphs of digital twins\n  * for IOT and non-IOT applications (neural nets, etc...)\n  * programmable via API (cURL)\n  * persistent\n  * asynchronous\n  * horizontally scalable\n  * schema-enforcing safety and correctness\n  \nThe DtLab API is the lowest level of interaction with the software that hosts the digital twins.\n\nThe building blocks of the DtLab system are:\n\n  1. DtType\n  2. DtActor\n  3. DtOperator (UNDER CONSTRUCTION)\n  4. DtLink (UNDER CONSTRUCTION)\n\nThe foundation of DtLab is that a DT (actor) state consists of a collection of the most recent named numeric observations of the DT's external analog.  IE: a DT for an oven would be a DtActor of a predefined DtType of \"oven\" that has a property called temperature that holds the last measured temperature of the oven.  The temperature observation is sent in a strict standard DTLab telemetry representation consisting of a \"name\", a datetime, and a numerical value.\n\nOriginal data sources will not transmit observations in this terse format.  Usually observations are sent from external systems as collections of information in hierarchical complex messages.  It is the responsibility of preprocessing systems like dtlab-ingest to decompose this complex verbose noisy inputs into the normalized timeseries observations sent to the DTs.\n\nDTs may be programmed to maintain properties that reflect computed states as well as observations.  A DtType for the above oven example may also have a \"tempurature_stability\" property that is maintained by a DtOperator assigned to the DtType.  The operator will be executed inside the actor every time its state advances - the operator can maintain other properties and has access to the actor's journal so it can perform timeseries calculations for every update.\n\nDTs can be linked (TBD - there is lifecycle and loop short circuit stuff to figure out when applying links).  The links let DTs monitor the state of collections of other DTs and they themselves can in turn be linked.  This graph resulting from DtLink connections supports complex systems needed for IOT and AR.\n"
servers:
  - url: 'http://localhost:8081'
    description: dev local mode
paths:
  '/dtlab-alligator/type/{typer}':
    parameters:
      - schema:
          type: string
        name: typer
        in: path
        required: true
    post:
      summary: create type
      tags:
        - tell
      responses:
        '201':
          description: 'If successfully created, returned object will be updated with typeId and create datetime'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
              examples:
                example-1:
                  value:
                    children:
                      - alternator_module
                      - starter_module
                    created: '2020-07-26T18:09:06.592Z'
                    name: machinery66
                    props:
                      - temp
                      - speed
        '401':
          description: Unauthorized
        '409':
          description: Conflict - you must delete the previous entry before creating a type of the same name.
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-dtlab-alligator-type-typeId
      description: create a new type with property names and allowable children types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
            examples:
              example-1:
                value:
                  props:
                    - temp
                    - speed
                  children:
                    - alternator_module
                    - starter_module
          application/xml:
            schema:
              type: object
              properties: {}
        description: a copy of the successfully created type definition
    get:
      summary: get type
      tags:
        - ask
      responses:
        '200':
          description: Definition of the type
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
              examples:
                example-1:
                  value:
                    children:
                      - alternator_module
                      - starter_module
                    created: '2020-07-23T01:30:24.783Z'
                    name: machinery1
                    props:
                      - temp
                      - speed
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-dtlab-alligator-typeId
      description: Look up a type definition.
    delete:
      summary: 'delete dttype'
      tags:
        - tell
      operationId: delete-dtlab-alligator-type-typeId
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: "Delete the typeId.  \n\nNote, this should be a developer operation and not available to normal client services.  Deleting a type makes instances of that type unavailable.  If you recreate a type and lookup an old instance created under the original type, that type with its old state will be resurected.  See the actor API to clean up instances of actors if that behavior is unwanted."
  '/dtlab-alligator/actor/{typeId}/{instanceId}/{telemetryFmt}':
    parameters:
      - schema:
          type: string
          example: machinery
        name: typeId
        in: path
        description: the name of the type that can show up in a path
        required: true
      - schema:
          type: string
          example: module0091
        name: instanceId
        in: path
        description: the id of the instance of the type
        required: true
      - schema:
          type: string
          enum:
            - named
            - pathed
          example: named
        name: telemetryFmt
        in: path
        description: "optional suffix to the path indicating telemetry is using 'name' instead of 'idx'"
    post:
      summary: update a single actor property
      tags:
        - tell
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entity (WebDAV)
      operationId: post-dtlab-alligator-type-actorId
      description: |-
        Update an actor instance with attached property value indentified by the index of the property in the typeId.

        Note that OpenAPI 3.0 does not support repeating path components that are very natural in REST.  They feel variable numbers of segments means they are optional - they are not optional at all in the DtLab system.  They are the way to point to the resource, making them correct use of path segments.  The OpenAPI team's solution to turn the segents into query params is hacky and not followed here.  To document a path for every supported level of parent / child relations would create massive duplication of documentation.  So know that DtPaths in DtLab support deeper parent child paths than the spec creates examples for.  `/dtlab-alligator/actor/{grandParentTypeId}/{grandParentInstanceId}/{parentTypeId}/{parentInstanceId}/{typeId}/{instanceId}` is valid.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Telemetry'
            examples:
              '{   "idx": 0,   "value": 5.5 }': {}
        description: The value of the property to upate identified by its index in its type definition.
    get:
      summary: get actor
      tags:
        - ask
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Telemetry'
              examples:
                example-1:
                  value:
                    - datetime: '2020-09-13T15:31:21.671Z'
                      idx: 0
                      value: 2.1
                    - datetime: '2020-07-26T17:25:21.803Z'
                      idx: 1
                      value: 2.2
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-dtlab-alligator-actorId
      description: |-
        Look up a the state of an actor.

        Note that OpenAPI 3.0 does not support repeating path components that are very natural in REST.  They feel variable numbers of segments means they are optional - they are not optional at all in the DtLab system.  They are the way to point to the resource, making them correct use of path segments.  The OpenAPI team's solution to turn the segents into query params is hacky and not followed here.  To document a path for every supported level of parent / child relations would create massive duplication of documentation.  So know that DtPaths in DtLab support deeper parent child paths than the spec creates examples for.  `/dtlab-alligator/actor/{grandParentTypeId}/{grandParentInstanceId}/{parentTypeId}/{parentInstanceId}/{typeId}/{instanceId}` is valid.
    delete:
      summary: 'delete dtactor'
      tags:
        - tell
      operationId: delete-dtlab-alligator-actor-typeId-instanceId
      responses:
        '202':
          description: Accepted
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      description: remove all traces of the DT - removes the journal.
components:
  schemas:
    Type:
      title: Type
      type: object
      x-examples:
        example-1:
          children:
            - alternator_module
            - starter_module
          created: '2020-07-23T01:30:24.783Z'
          name: machinery
          props:
            - temp
            - speed
      description: "Constrains digital twins to have certain properties and children of certain types.  \n\nA type can be recursive and also show up in multiple locations in a DT tree / graph."
      properties:
        name:
          type: string
        created:
          type: string
        props:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            type: string
    Telemetry:
      title: Telemetry
      type: object
      properties:
        datetime:
          type: string
        idx:
          type: integer
        value:
          type: number
      required:
        - idx
        - value
      description: "Telemetry is a time series entity - each change to a DT's state is journaled with a datetime."
      x-examples:
        example-1:
          idx: 0
          value: 2.1
          datetime: '2020-09-13T15:31:21.671Z'
        example-2:
          idx: 1
          value: 2.2
    NamedTelemetry:
      title: NamedTelemetry
      type: object
      properties:
        datetime:
          type: string
        name:
          type: string
        value:
          type: number
      required:
        - name
        - value
      description: Convenience format for Telemetry when idx is unavailable.
      x-examples:
        example-1:
          name: height
          value: 2.1
          datetime: '2020-09-13T15:31:21.671Z'
        example-2:
          name: height
          value: 2.2
tags:
  - name: ask
  - name: tell
