openapi: 3.0.0
info:
  title: dtlab alligator
  version: '1.0'
  contact:
    name: navicore
    email: ed@onextent.com
  license:
    name: MIT
    url: 'https://github.com/SoMind/dtlab-scala-alligator/blob/master/LICENSE'
  description: |-
    Manage DtLab actor runtime cloud.

    DtLab is an actor environment that enables the instantiation of DTs (digital twins) with persistence and messaging and basic schema checking.
servers:
  - url: 'http://localhost:8081'
    description: dev local mode
paths:
  '/dtlab-alligator/type/{typeId}':
    parameters:
      - schema:
          type: string
          example: machinery
        name: typeId
        in: path
        description: the name of the type that can show up in a path
        required: true
    post:
      summary: create type
      tags:
        - tell
      responses:
        '201':
          description: 'If successfully created, returned object will be updated with typeId and create datetime'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
              examples:
                example-1:
                  value:
                    children:
                      - alternator_module
                      - starter_module
                    created: '2020-07-26T18:09:06.592Z'
                    name: machinery66
                    props:
                      - temp
                      - speed
        '409':
          description: Conflict - you must delete the previous entry before creating a type of the same name.
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-dtlab-alligator-type-typeId
      description: create a new type with property names and allowable children types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Type'
            examples:
              example-1:
                value:
                  props:
                    - temp
                    - speed
                  children:
                    - alternator_module
                    - starter_module
        description: a copy of the successfully created type definition
    get:
      summary: get type
      tags:
        - ask
      responses:
        '200':
          description: Definition of the type
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
              examples:
                example-1:
                  value:
                    children:
                      - alternator_module
                      - starter_module
                    created: '2020-07-23T01:30:24.783Z'
                    name: machinery1
                    props:
                      - temp
                      - speed
        '404':
          description: Not Found
      operationId: get-dtlab-alligator-typeId
      description: Look up a type definition.
  '/dtlab-alligator/actor/{typeId}/{instanceId}':
    parameters:
      - schema:
          type: string
          example: machinery
        name: typeId
        in: path
        description: the name of the type that can show up in a path
        required: true
      - schema:
          type: string
          example: module0091
        name: instanceId
        in: path
        description: the id of the instance of the type
        required: true
    post:
      summary: update a single actor property
      tags:
        - tell
      responses:
        '202':
          description: Accepted
        '422':
          description: Unprocessable Entity (WebDAV)
      operationId: post-dtlab-alligator-type-actorId
      description: update an actor instance with attached property value indentified by the index of the property in the typeId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Telemetry'
        description: The value of the property to upate identified by its index in its type definition.
    get:
      summary: get actor
      tags:
        - ask
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Telemetry'
              examples:
                example-1:
                  value:
                    - datetime: '2020-09-13T15:31:21.671Z'
                      idx: 0
                      value: 2.1
                    - datetime: '2020-07-26T17:25:21.803Z'
                      idx: 1
                      value: 2.2
        '404':
          description: Not Found
      operationId: get-dtlab-alligator-actorId
      description: Look up a the state of an actor.
components:
  schemas:
    Type:
      title: Type
      type: object
      x-examples:
        example-1:
          children:
            - alternator_module
            - starter_module
          created: '2020-07-23T01:30:24.783Z'
          name: machinery
          props:
            - temp
            - speed
      description: "Constrains digital twins to have certain properties and children of certain types.  \n\nA type can be recursive and also show up in multiple locations in a DT tree / graph."
      properties:
        name:
          type: string
        created:
          type: string
        props:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            type: string
    Telemetry:
      title: Telemetry
      type: object
      properties:
        datetime:
          type: string
        idx:
          type: integer
        value:
          type: number
      required:
        - idx
        - value
      description: "Telemetry is a time series entity - each change to a DT's state is journaled with a datetime."
      x-examples:
        example-1:
          idx: 0
          value: 2.1
          datetime: '2020-09-13T15:31:21.671Z'
        example-2:
          idx: 1
          value: 2.2
tags:
  - name: create
  - name: delete
  - name: ask
  - name: tell
