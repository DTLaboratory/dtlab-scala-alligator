openapi: 3.0.0
info:
  title: dtlab alligator
  version: '1.0'
  contact:
    name: navicore
    email: ed@onextent.com
  license:
    name: MIT
    url: 'https://github.com/SoMind/dtlab-scala-alligator/blob/master/LICENSE'
  description: |-
    Manage DtLab actor runtime cloud.

    DtLab is an actor environment that enables the instantiation of DTs (digital twins) with persistence and messaging and basic schema checking.
servers:
  - url: 'http://localhost:8081'
    description: dev local mode
paths:
  '/dtlab-alligator/type/{typename}':
    parameters:
      - schema:
          type: string
          example: machinery
        name: typename
        in: path
        description: the name of the type that can show up in a path
        required: true
    post:
      summary: create type
      tags:
        - create
        - tell
      responses:
        '201':
          description: 'If successfully created, returned object will be updated with typename and create datetime'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
        '409':
          description: Conflict - you must delete the previous entry before creating a type of the same name.
          content:
            application/json:
              schema:
                type: object
                properties: {}
      operationId: post-dtlab-alligator-type-typename
      description: create a new type with property names and allowable children types
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTypeRequest'
            examples:
              example-1:
                value:
                  props:
                    - temp
                    - speed
                  children:
                    - alternator_module
                    - starter_module
        description: a copy of the successfully created type definition
    get:
      summary: get type
      tags:
        - ask
      responses:
        '200':
          description: Definition of the type
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Type'
              examples:
                example-1:
                  value:
                    children:
                      - alternator_module
                      - starter_module
                    created: '2020-07-23T01:30:24.783Z'
                    name: machinery1
                    props:
                      - temp
                      - speed
        '404':
          description: Not Found
      operationId: get-dtlab-alligator-typename
      description: Look up a type definition.
components:
  schemas:
    CreateTypeRequest:
      title: CreateTypeRequest
      type: object
      properties:
        props:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            type: string
      x-examples:
        example-1:
          props:
            - temp
            - speed
          children:
            - alternator_module
            - starter_module
      description: Data needed to create new type
    Type:
      title: Type
      type: object
      properties:
        name:
          type: string
        created:
          type: string
        props:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            type: string
      x-examples:
        example-1:
          children:
            - alternator_module
            - starter_module
          created: '2020-07-23T01:30:24.783Z'
          name: machinery
          props:
            - temp
            - speed
      description: "Constrains digital twins to have certain properties and children of certain types.  \n\nA type can be recursive and also show up in multiple locations in a DT tree / graph."
tags:
  - name: create
  - name: delete
  - name: ask
  - name: tell
